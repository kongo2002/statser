root <- template / function / paths;

template <- 'template(' expr spaces (',' spaces arguments )? spaces ')'
`
case Node of
    [_, Expr, _, [], _, _] -> {template, Expr, []};
    [_, Expr, _, [_, _, Args], _, _] -> {template, Expr, Args}
end
`;

expr <- function / paths;

function <- alphanum '(' arguments ')'
`
[Fctn, P1, Args, P2] = Node, {call, iolist_to_binary(Fctn), Args}
`;
arguments <- head:argument tail:( spaces comma spaces argument spaces )*
`
Head = proplists:get_value(head, Node),
Rest = [lists:nth(4, I) || I <- proplists:get_value(tail, Node)],
[Head | Rest]
`;
argument <- number / bool / singleq_string / doubleq_string / function / paths;

paths <- path `{paths, Node}`;
path <- head:path_elem tail:( dot ( path_elem / path_alternatives ) )*
`
Head = proplists:get_value(head, Node),
Rest = [lists:nth(2, I) || I <- proplists:get_value(tail, Node)],
[Head | Rest]
`;

path_elem <- ( wordchar / ( escape special ) )+ `iolist_to_binary(Node)`;

path_alternatives <- '{' ( path_alternative ) '}' `{alternative, lists:nth(2, Node)}`;
path_alternative <- spaces head:alternative tail:( spaces comma spaces alternative spaces )*
`
Head = proplists:get_value(head, Node),
Rest = [lists:nth(4, I) || I <- proplists:get_value(tail, Node)],
[Head | Rest]
`;
alternative <- wordchar+ `iolist_to_binary(Node)`;

wordchar <- [a-zA-Z0-9*_-];
alphanum <- [a-zA-Z] [a-zA-Z0-9]*;
special <- [(){},=."];
escape <- '\\';
dot <- '.';
comma <- ',';

bool <- true / false;
true <- 'true' `true`;
false <- 'false' `false`;

number <- float / int;
float <- '-'? digit+ '.' digit+ `list_to_float(binary_to_list(iolist_to_binary(Node)))`;
int <- '-'? digit+ `list_to_integer(binary_to_list(iolist_to_binary(Node)))`;
digit <- [0-9];

doubleq_string <- '"' chars:(!'"' ("\\\\" / '\\"' / .))* '"' `iolist_to_binary(proplists:get_value(chars, Node))`;
singleq_string <- "'" chars:(!"'" ("\\\\" / "\\'" / .))* "'" `iolist_to_binary(proplists:get_value(chars, Node))`;

spaces <- [ \t\n\s\r]*;
