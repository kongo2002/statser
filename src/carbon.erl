%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.1.1
-module(carbon).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("carbon.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'Point'() :: #'Point'{}.
-type 'Metric'() :: #'Metric'{}.
-type 'Payload'() :: #'Payload'{}.
-export_type(['Point'/0, 'Metric'/0, 'Payload'/0]).

-spec encode_msg(#'Point'{} | #'Metric'{} | #'Payload'{}) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(#'Point'{} | #'Metric'{} | #'Payload'{}, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'Point'{} -> e_msg_Point(Msg, TrUserData);
      #'Metric'{} -> e_msg_Metric(Msg, TrUserData);
      #'Payload'{} -> e_msg_Payload(Msg, TrUserData)
    end.



e_msg_Point(Msg, TrUserData) ->
    e_msg_Point(Msg, <<>>, TrUserData).


e_msg_Point(#'Point'{timestamp = F1, value = F2}, Bin,
	    TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0.0 -> B1;
		true -> e_type_double(TrF2, <<B1/binary, 17>>)
	     end
	   end
    end.

e_msg_Metric(Msg, TrUserData) ->
    e_msg_Metric(Msg, <<>>, TrUserData).


e_msg_Metric(#'Metric'{metric = F1, points = F2}, Bin,
	     TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true -> e_field_Metric_points(TrF2, B1, TrUserData)
      end
    end.

e_msg_Payload(Msg, TrUserData) ->
    e_msg_Payload(Msg, <<>>, TrUserData).


e_msg_Payload(#'Payload'{metrics = F1}, Bin,
	      TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true -> e_field_Payload_metrics(TrF1, Bin, TrUserData)
      end
    end.

e_mfield_Metric_points(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Point(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Metric_points([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_Metric_points(id(Elem, TrUserData),
				  Bin2, TrUserData),
    e_field_Metric_points(Rest, Bin3, TrUserData);
e_field_Metric_points([], Bin, _TrUserData) -> Bin.

e_mfield_Payload_metrics(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Metric(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Payload_metrics([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_Payload_metrics(id(Elem, TrUserData),
				    Bin2, TrUserData),
    e_field_Payload_metrics(Rest, Bin3, TrUserData);
e_field_Payload_metrics([], Bin, _TrUserData) -> Bin.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_double(V, Bin) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin) ->
    <<Bin/binary, 0:48, 248, 127>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Point' ->
	  try d_msg_Point(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Point', {Class, Reason, StackTrace}}}})
	  end;
      'Metric' ->
	  try d_msg_Metric(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Metric', {Class, Reason, StackTrace}}}})
	  end;
      'Payload' ->
	  try d_msg_Payload(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Payload', {Class, Reason, StackTrace}}}})
	  end
    end.



d_msg_Point(Bin, TrUserData) ->
    dfp_read_field_def_Point(Bin, 0, 0, id(0, TrUserData),
			     id(0.0, TrUserData), TrUserData).

dfp_read_field_def_Point(<<8, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_Point_timestamp(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_Point(<<17, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_Point_value(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_Point(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'Point'{timestamp = F@_1, value = F@_2};
dfp_read_field_def_Point(Other, Z1, Z2, F@_1, F@_2,
			 TrUserData) ->
    dg_read_field_def_Point(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData).

dg_read_field_def_Point(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Point(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
dg_read_field_def_Point(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Point_timestamp(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      17 ->
	  d_field_Point_value(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Point(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_Point(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Point(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    3 ->
		skip_group_Point(Rest, Key bsr 3, 0, F@_1, F@_2,
				 TrUserData);
	    5 -> skip_32_Point(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Point(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'Point'{timestamp = F@_1, value = F@_2}.

d_field_Point_timestamp(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Point_timestamp(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_Point_timestamp(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_Point(RestF, 0, 0, NewFValue, F@_2,
			     TrUserData).

d_field_Point_value(<<0:48, 240, 127, Rest/binary>>, Z1,
		    Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_Point(Rest, Z1, Z2, F@_1, infinity,
			     TrUserData);
d_field_Point_value(<<0:48, 240, 255, Rest/binary>>, Z1,
		    Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_Point(Rest, Z1, Z2, F@_1,
			     '-infinity', TrUserData);
d_field_Point_value(<<_:48, 15:4, _:4, _:1, 127:7,
		      Rest/binary>>,
		    Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_Point(Rest, Z1, Z2, F@_1, nan,
			     TrUserData);
d_field_Point_value(<<Value:64/little-float,
		      Rest/binary>>,
		    Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_Point(Rest, Z1, Z2, F@_1, Value,
			     TrUserData).

skip_varint_Point(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    skip_varint_Point(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_Point(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Point(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_length_delimited_Point(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Point(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
skip_length_delimited_Point(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Point(Rest2, 0, 0, F@_1, F@_2,
			     TrUserData).

skip_group_Point(Bin, FNum, Z2, F@_1, F@_2,
		 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Point(Rest, 0, Z2, F@_1, F@_2,
			     TrUserData).

skip_32_Point(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_Point(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_64_Point(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_Point(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

d_msg_Metric(Bin, TrUserData) ->
    dfp_read_field_def_Metric(Bin, 0, 0, id([], TrUserData),
			      id([], TrUserData), TrUserData).

dfp_read_field_def_Metric(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_Metric_metric(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_Metric(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_Metric_points(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_Metric(<<>>, 0, 0, F@_1, R1,
			  TrUserData) ->
    #'Metric'{metric = F@_1,
	      points = lists_reverse(R1, TrUserData)};
dfp_read_field_def_Metric(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData) ->
    dg_read_field_def_Metric(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData).

dg_read_field_def_Metric(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Metric(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
dg_read_field_def_Metric(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Metric_metric(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      18 ->
	  d_field_Metric_points(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Metric(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_Metric(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Metric(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    3 ->
		skip_group_Metric(Rest, Key bsr 3, 0, F@_1, F@_2,
				  TrUserData);
	    5 -> skip_32_Metric(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Metric(<<>>, 0, 0, F@_1, R1,
			 TrUserData) ->
    #'Metric'{metric = F@_1,
	      points = lists_reverse(R1, TrUserData)}.

d_field_Metric_metric(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Metric_metric(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_Metric_metric(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_Metric(RestF, 0, 0, NewFValue, F@_2,
			      TrUserData).

d_field_Metric_points(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Metric_points(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_Metric_points(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_Point(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Metric(RestF, 0, 0, F@_1,
			      cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_Metric(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    skip_varint_Metric(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
skip_varint_Metric(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Metric(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_length_delimited_Metric(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Metric(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
skip_length_delimited_Metric(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Metric(Rest2, 0, 0, F@_1, F@_2,
			      TrUserData).

skip_group_Metric(Bin, FNum, Z2, F@_1, F@_2,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Metric(Rest, 0, Z2, F@_1, F@_2,
			      TrUserData).

skip_32_Metric(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_Metric(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_64_Metric(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_Metric(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

d_msg_Payload(Bin, TrUserData) ->
    dfp_read_field_def_Payload(Bin, 0, 0,
			       id([], TrUserData), TrUserData).

dfp_read_field_def_Payload(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_Payload_metrics(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Payload(<<>>, 0, 0, R1,
			   TrUserData) ->
    #'Payload'{metrics = lists_reverse(R1, TrUserData)};
dfp_read_field_def_Payload(Other, Z1, Z2, F@_1,
			   TrUserData) ->
    dg_read_field_def_Payload(Other, Z1, Z2, F@_1,
			      TrUserData).

dg_read_field_def_Payload(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Payload(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
dg_read_field_def_Payload(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Payload_metrics(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Payload(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Payload(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Payload(Rest, 0, 0, F@_1,
					      TrUserData);
	    3 ->
		skip_group_Payload(Rest, Key bsr 3, 0, F@_1,
				   TrUserData);
	    5 -> skip_32_Payload(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Payload(<<>>, 0, 0, R1, TrUserData) ->
    #'Payload'{metrics = lists_reverse(R1, TrUserData)}.

d_field_Payload_metrics(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Payload_metrics(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_Payload_metrics(<<0:1, X:7, Rest/binary>>, N,
			Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_Metric(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Payload(RestF, 0, 0,
			       cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_Payload(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    skip_varint_Payload(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Payload(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    dfp_read_field_def_Payload(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_length_delimited_Payload(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Payload(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_Payload(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Payload(Rest2, 0, 0, F@_1,
			       TrUserData).

skip_group_Payload(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Payload(Rest, 0, Z2, F@_1,
			       TrUserData).

skip_32_Payload(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_Payload(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_64_Payload(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_Payload(Rest, Z1, Z2, F@_1,
			       TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'Point'{} -> merge_msg_Point(Prev, New, TrUserData);
      #'Metric'{} -> merge_msg_Metric(Prev, New, TrUserData);
      #'Payload'{} -> merge_msg_Payload(Prev, New, TrUserData)
    end.

merge_msg_Point(#'Point'{timestamp = PFtimestamp,
			 value = PFvalue},
		#'Point'{timestamp = NFtimestamp, value = NFvalue},
		_) ->
    #'Point'{timestamp =
		 if NFtimestamp =:= undefined -> PFtimestamp;
		    true -> NFtimestamp
		 end,
	     value =
		 if NFvalue =:= undefined -> PFvalue;
		    true -> NFvalue
		 end}.

merge_msg_Metric(#'Metric'{metric = PFmetric,
			   points = PFpoints},
		 #'Metric'{metric = NFmetric, points = NFpoints},
		 TrUserData) ->
    #'Metric'{metric =
		  if NFmetric =:= undefined -> PFmetric;
		     true -> NFmetric
		  end,
	      points =
		  if PFpoints /= undefined, NFpoints /= undefined ->
			 'erlang_++'(PFpoints, NFpoints, TrUserData);
		     PFpoints == undefined -> NFpoints;
		     NFpoints == undefined -> PFpoints
		  end}.

merge_msg_Payload(#'Payload'{metrics = PFmetrics},
		  #'Payload'{metrics = NFmetrics}, TrUserData) ->
    #'Payload'{metrics =
		   if PFmetrics /= undefined, NFmetrics /= undefined ->
			  'erlang_++'(PFmetrics, NFmetrics, TrUserData);
		      PFmetrics == undefined -> NFmetrics;
		      NFmetrics == undefined -> PFmetrics
		   end}.


verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'Point'{} -> v_msg_Point(Msg, ['Point'], TrUserData);
      #'Metric'{} ->
	  v_msg_Metric(Msg, ['Metric'], TrUserData);
      #'Payload'{} ->
	  v_msg_Payload(Msg, ['Payload'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_Point/3}).
v_msg_Point(#'Point'{timestamp = F1, value = F2}, Path,
	    _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [timestamp | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_double(F2, [value | Path])
    end,
    ok;
v_msg_Point(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Point'}, X, Path).

-dialyzer({nowarn_function,v_msg_Metric/3}).
v_msg_Metric(#'Metric'{metric = F1, points = F2}, Path,
	     TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [metric | Path])
    end,
    if is_list(F2) ->
	   _ = [v_msg_Point(Elem, [points | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Point'}}, F2,
			 [points | Path])
    end,
    ok;
v_msg_Metric(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Metric'}, X, Path).

-dialyzer({nowarn_function,v_msg_Payload/3}).
v_msg_Payload(#'Payload'{metrics = F1}, Path,
	      TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_Metric(Elem, [metrics | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Metric'}}, F1,
			 [metrics | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_type_uint32/2}).
v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_double/2}).
v_type_double(N, _Path) when is_float(N) -> ok;
v_type_double(N, _Path) when is_integer(N) -> ok;
v_type_double(infinity, _Path) -> ok;
v_type_double('-infinity', _Path) -> ok;
v_type_double(nan, _Path) -> ok;
v_type_double(X, Path) ->
    mk_type_error(bad_double_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, 'Point'},
      [#field{name = timestamp, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = double,
	      occurrence = optional, opts = []}]},
     {{msg, 'Metric'},
      [#field{name = metric, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = points, fnum = 2, rnum = 3,
	      type = {msg, 'Point'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Payload'},
      [#field{name = metrics, fnum = 1, rnum = 2,
	      type = {msg, 'Metric'}, occurrence = repeated,
	      opts = []}]}].


get_msg_names() -> ['Point', 'Metric', 'Payload'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['Point', 'Metric', 'Payload'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('Point') ->
    [#field{name = timestamp, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = double,
	    occurrence = optional, opts = []}];
find_msg_def('Metric') ->
    [#field{name = metric, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = points, fnum = 2, rnum = 3,
	    type = {msg, 'Point'}, occurrence = repeated,
	    opts = []}];
find_msg_def('Payload') ->
    [#field{name = metrics, fnum = 1, rnum = 2,
	    type = {msg, 'Metric'}, occurrence = repeated,
	    opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> carbon.



gpb_version_as_string() ->
    "4.1.1".

gpb_version_as_list() ->
    [4,1,1].
